import sha1 from 'sha1';
import dbClient from '../utils/db';
import redisClient from '../utils/redis';

class UsersController {
  static async postNew(req, res) {
    // retrieving email and pass from request
    const { email, password } = req.body;
    // checking if both are provided
    if (!email) {
      return res.status(400).json({
        error: 'Missing email',
      });
    }
    if (!password) {
      return res.status(400).json({
        error: 'Missing password',
      });
    }
    const existingUser = await dbClient.db.collection('users').findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        error: 'Already exist',
      });
    }
    // Hashing the password using SHA1
    const hashedPass = sha1(password);

    // Saving the new user to the 'users' collection
    const newUser = {
      email,
      password: hashedPass,
    };
    try {
      const result = await dbClient.db.collection('users').insertOne(newUser);
      return res.status(201).json({
        id: result.insertedId, // (auto-generated by MongoDB)
        email: newUser.email,
      });
    } catch (error) {
      return res.status(500).json({ error: 'Failed to save user' });
    }
  }

  static async getMe(req, res) {
    // retrieve the user based on the token used
    const token = req.headers['X-Token'];
    const userId = await redisClient.getMeget(`auth_${token}`);
    const userCollection = dbClient.db.collection('users');
    // _id: MongoDB's unique identifier for documents - of type ObjectId
    const user = await userCollection.findOne({ _id: userId });
    if (!user) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    return res.status(200).json({ id: user._id, email: user.email });
  }
}

export default UsersController;
